/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Moderatorrole = "admin" | "moderator";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Events {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  title: string;
  updatedAt: Generated<Timestamp>;
}

export interface Games {
  aggregation: Json;
  createdAt: Generated<Timestamp>;
  eventId: string;
  formatting: Json;
  id: Generated<string>;
  inputs: Json;
  logoUrl: string | null;
  sort: Json;
  title: string;
  updatedAt: Generated<Timestamp>;
}

export interface Moderators {
  createdAt: Generated<Timestamp>;
  eventId: string;
  id: Generated<Int8>;
  key: string;
  name: string;
  role: Moderatorrole;
  updatedAt: Generated<Timestamp>;
}

export interface Scores {
  createdAt: Generated<Timestamp>;
  gameId: string;
  moderatorId: Generated<Int8>;
  playerName: string;
  updatedAt: Generated<Timestamp>;
  values: Json;
}

export interface DB {
  events: Events;
  games: Games;
  moderators: Moderators;
  scores: Scores;
}
